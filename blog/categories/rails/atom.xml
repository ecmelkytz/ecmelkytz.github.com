<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Ecmel Kaytazoğlu]]></title>
  <link href="http://ecmelkytz.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ecmelkytz.github.com/"/>
  <updated>2018-06-07T11:25:18+03:00</updated>
  <id>http://ecmelkytz.github.com/</id>
  <author>
    <name><![CDATA[Ecmel Kaytazoğlu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails: ActiveStorage]]></title>
    <link href="http://ecmelkytz.github.com/blog/2018/05/28/rails-activestorage/"/>
    <updated>2018-05-28T11:16:46+03:00</updated>
    <id>http://ecmelkytz.github.com/blog/2018/05/28/rails-activestorage</id>
    <content type="html"><![CDATA[<h2>1. ActiveStorage Nedir?</h2>

<p>Rails 5.2 ile gelen ActiveStorage özelliği, dosyaları Amazon S3, Google Cloud, Microsoft Azure Cloud gibi cloud bir servise upload etmemizi sağlar.</p>

<h2>2. Kurulum</h2>

<p><code>rails active_storage:install</code></p>

<p>Bu çalıştırılan kod <code>active_storage_blobs</code> ve <code>active_storage_attachments</code> tablolarını oluşturan bir migrate dosyası ve servis konfigürasyonları için config altında <strong>storage.yml</strong> dosyası oluşturur.</p>

<p align="center"><img src="http://drive.google.com/uc?export=view&id=1_yLpznYWjIT29iiWDXgKgd3zEXW8gdR2"/></p>


<h2>3. ActiveStorage&#8217;ın Temel Sınıfları</h2>

<ul>
<li>ActiveStorage::Service</li>
<li>ActiveStorage::Blob</li>
<li>ActiveStorage::Attachment</li>
</ul>


<h3>3.1 ActiveStorage::Service</h3>

<p><strong>Service</strong> sadece baytların hareketinden sorumlu kısımdır. Dosyanın baytlarını bellekten ve browserdan alıp disk&#8217;e taşır.</p>

<pre><code class="ruby">class ActiveStorage::Service
  def upload(key, io, checksum: nil)
    raise NotImplementedError
  end
  def download(key)
    raise NotImplementedError
  end
end
</code></pre>

<p>ActiveStorage::Service aslında bir patterndir. Sadece bir tane service değil, birden fazla subclass var. Yani ActiveStorage::Service&#8217;i direk çağırıp <strong>upload/download</strong> metodlarını kullanamayız. Onun subclass&#8217;larından biriyle çağırabiliriz. Tüm subclass&#8217;larda upload ve download metodu mevcut çünkü her servis kendi gerçeklemesini farklı bir yol ile yapmaktadır.</p>

<p>Disk alt sınıfı:  <code>class ActiveStorage::Service::DiskService &lt; Service</code></p>

<p>S3 alt sınıf: <code>class ActiveStorage::Service::S3Service &lt; Service</code></p>

<p>Farklı bir servis kullanmak istiyorsak bu pattern doğrultusunda oluşturup kullanabiliriz. ActiveStorage şu an Disk, Amazon S3, Microsoft Azure Storage, Google Cloud Storage, Mirror servislerini desteklemektedir.</p>

<!--more-->


<h4>3.1.1 Yeni Servis Konfigürasyonu</h4>

<p><strong>storage.yml</strong> içerisinde default servis olarak Disk kullanılmaktadır. Hangi servisi kullanmak istiyorsak onu belirtmeliyiz. Örneğin Amazon S3 servisini eklemek için aşağıdaki gibi bir düzenleme yapmamız ve <a href="https://github.com/aws/aws-sdk-ruby">aws-sdk-s3</a> gem&#8217;ini Gemfile&#8217;a eklememiz gerekmektedir.</p>

<pre><code class="yml">local:
  service: Disk
  root: &lt;%= Rails.root.join('storage') %&gt;

amazon:
  service: S3
  access_key_id: ""
  secret_access_key: ""
  region: ""
  bucket: ""
</code></pre>

<h4>3.1.2 Mirror Servis Özelliği</h4>

<p>Birden fazla servisi senkronize olarak mirror servis olarak kullanarak yedekli çalışabiliriz. Bir dosya eklendiğinde veya silindiğinde bütün mirror edilmiş servislere aynı anda yansıtılır. Bu özellik production&#8217;da servisler arası geçişi kolaylaştırmak için kullanılabilir.</p>

<p>Mirror servis örneği:
&#8220;`yml
s3_west_coast:
  service: S3
  access_key_id: &ldquo;&rdquo;
  secret_access_key: &ldquo;&rdquo;
  &hellip;</p>

<p>s3_east_coast:
  service: S3
  access_key_id: &ldquo;&rdquo;
  secret_access_key: &ldquo;&rdquo;
  &hellip;</p>

<p>production:
  service: Mirror
  primary: s3_east_coast
  mirrors:
    - s3_west_coast
&#8220;`
Dosyalar primary servisden sunulur.</p>

<h3>3.2 ActiveStorage::Blob</h3>

<p><strong>Blob</strong>; dosya adı,  content-type gibi metadataların tutulduğu yerdir. Dosyanın aslı depolama servisinde ya da diskte saklanır. Her blob’un depolama servisinde identifier key&#8217;i vardır.</p>

<pre><code class="ruby">create_table :active_storage_blobs do |t|
  t.string   :key,        null: false
  t.string   :filename,   null: false
  t.string   :content_type
  t.text     :metadata
  t.bigint   :byte_size,  null: false
  t.string   :checksum,   null: false
  t.datetime :created_at, null: false

  t.index [ :key ], unique: true
end
</code></pre>

<h3>3.3  ActiveStorage::Attachment</h3>

<p><strong>Attachment</strong>, blob ile model arasında bağlantıyı sağlar. Bir blob birden fazla modelle bağlantılı olabilir.</p>

<pre><code class="ruby">create_table :active_storage_attachments do |t|
  t.string     :name,     null: false
  t.references :record,   null: false, polymorphic: true, index: false
  t.references :blob,     null: false
  t.datetime :created_at, null: false

  t.index [ :record_type, :record_id, :name, :blob_id ], name: "index_active_storage_attachments_uniqueness", unique: true
end
</code></pre>

<h2>4. Nasıl dosya eklenir?</h2>

<p><code>Car</code> adında bir modeliniz var diyelim ve araba resimlerini tutmak için dosya upload etmek istiyorsunuz. O halde yapacağınız ilk iş bir migration dosyası ile modelinize resimleri tutacağınız yeni bir kolon eklemeniz olacaktır. Bu upload yapmak istediğiniz her model için geçerlidir.</p>

<p>ActiveStorage ise diğer dosya upload çözümlerinden biraz farklı çalışır. ActiveStorage&#8217;da modelinize yeni bir field eklemeye gerek yoktur. Dosya ile ilgili bütün bilgiler activestorage install edilirken oluşturulan <code>blobs</code> ve <code>attachments</code> tablolarında tutulmaktadır.</p>

<h3>4.1 Bir dosya attach etmek için yapılması gerekenler</h3>

<pre><code class="ruby">class Car &lt; ApplicationRecord
  has_one_attached :image
end

# strong_parameters
params.require(:car).permit(:name, :image)
</code></pre>

<h3>4.2 Birden fazla dosya attach etmek için yapılması gerekenler</h3>

<pre><code class="ruby">class Car &lt; ApplicationRecord
  has_many_attached :images
end

# strong_parameters
params.require(:car).permit(:name, images: [])
</code></pre>

<h2>5. Transformation İşlemleri</h2>

<p>Transforming işlemcilerin(processor) destekleği metodlar ölçüsünde bloblar üzerinde resimlerin varyasyonlarını oluşturabiliriz. Default processor olarak MiniMagick kullanılmaktadır ancak <a href="https://www.rubydoc.info/gems/ruby-vips/Vips/Image">Vips</a>&lsquo;de kullanılabilir.</p>

<p>Biçimlendirmeyi etkinleştirmek için <a href="https://github.com/janko-m/image_processing">image_processing</a> gemi kullanılmaktadır. Bununla ilgili <a href="https://github.com/rails/rails/pull/32471">pull request</a>.
<code>
gem 'image_processing', '~&gt; 1.2'
</code>
Aşağıdaki satır yorumlandığı zaman bir defaya mahsus orijinal blob&#8217;un biçimlendirilmiş halinin URL&#8217;i oluşturulur ve dosyalarınız nerede tutuluyorsa disk/cloud oraya kaydedilir.</p>

<pre><code class="erb">&lt;%= image_tag @cat.image.variant(resize: "100x100") %&gt;
</code></pre>

<h2>6. Direk Upload</h2>

<p>ActiveStorage bir ruby gemi olmasının yanında bünyesinde javascript kütüphanesi de barındırır. Dosyalarımızı Rails uygulamasına değil de direk cloud bir servise upload etmek istediğimiz zaman bu javascript kodları devreye girmektedir.</p>

<p>Blob oluşurken bir identifier key üretilir ve dosya bu key ile cloud servise upload edilir. Resme tekrar ulaşmak istediğimizde bu key ile bağlantı kurulup erişilmektedir. Direk upload işleminde blob oluşturulma ve resmin store edilme sıralamasında değişiklik olur.</p>

<h3>Direk upload işlemi için</h3>

<pre><code class="erb">&lt;%= form.file_field :images, multiple: true, direct_upload: true %&gt;
</code></pre>

<h2>7. Tartışma</h2>

<p>Rails dosya upload işlemleri için <a href="https://github.com/carrierwaveuploader/carrierwave">carrierview</a>, <a href="https://github.com/thoughtbot/paperclipcarrierview">paperclip</a>, <a href="https://github.com/refile/refile">refine</a> gibi bir çok güzel kütüphaneye sahip. Hepsinin kendi içinde farklı yaklaşımları var. Doğru bir tercih için ihtiyaçlar belirlenmeli ve kütüphanelerin özellik setine bakılarak bir seçim yapılmalıdır.</p>

<p>Paperclip geliştiricileri artık Rails&#8217;in kendi upload çözümü olan ActiveStorage&#8217;ın kullanımını tavsiye ediyor. Paperclip ile ActiveStorage&#8217;ı karşılaştıracak olursak dosya validasyonları konusunda ActiveStorage&#8217;ın şu an için güzel bir çözümü yok. Bununla ilgili <a href="https://github.com/musaffa/file_validators">file_validators</a> gibi 3rd party çözüm önerileri var ya da custom validasyon yazılması gerekiyor.</p>

<p>&ldquo;ActiveStrorage&#8217;ı kullanalım mı?, ActiveStorage&#8217;a geçiş yapalım mı?&rdquo; tarzında sorulara araştırmalarım sonucunda şöyle bir cevap elde ettim diyebilirim:</p>

<blockquote><p>Uygulamanızda halihazırda kullandığınız bir upload çözümü var ve siz bundan memnunsanız ActiveStorage&#8217;a geçiş yapmanız için değerli bir sebebiniz yok demektir. Böyle bir durumda, ActiveStrorage&#8217;da bulunan bir özelliği kullanmak istiyorsanız geçiş yapabilirsiniz. Mirror servis özelliği gibi. Yani  başka bir upload çözümüne geçiş yapmayı düşünüyorsanız bunu kullanmak istediğiniz özellik bazında karar verin.</p>

<p>Eğer yeni bir uygulamaya başlıyorsanız ActiveStorage&#8217;ı deneyin.</p></blockquote>

<h2>8. Kaynakça</h2>

<ul>
<li><a href="http://guides.rubyonrails.org/active_storage_overview.html">http://guides.rubyonrails.org/active_storage_overview.html</a></li>
<li><a href="https://prograils.com/posts/rails-5-2-active-storage-new-approach-to-file-uploads">https://prograils.com/posts/rails-5-2-active-storage-new-approach-to-file-uploads</a></li>
<li><a href="https://skillsmatter.com/skillscasts/11458-introduction-to-active-storage">https://skillsmatter.com/skillscasts/11458-introduction-to-active-storage</a></li>
<li><a href="https://www.youtube.com/watch?v=-_w4uqoVSpw">RailsConf 2018: Inside Active Storage</a></li>
<li><a href="https://www.engineyard.com/blog/active-storage">https://www.engineyard.com/blog/active-storage</a></li>
<li><a href="http://www.akitaonrails.com/2017/07/07/upcoming-built-in-upload-solution-for-rails-5-2-activestorage">http://www.akitaonrails.com/2017/07/07/upcoming-built-in-upload-solution-for-rails-5-2-activestorage</a></li>
<li><a href="https://www.reddit.com/r/rails/comments/8gif2j/paperclip_is_dead_time_to_start_using">https://www.reddit.com/r/rails/comments/8gif2j/paperclip_is_dead_time_to_start_using</a></li>
<li><a href="http://api.rubyonrails.org/v5.2.0/">http://api.rubyonrails.org/v5.2.0/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: default_scope kullanmak kötü bir fikir mi?]]></title>
    <link href="http://ecmelkytz.github.com/blog/2017/03/12/rails-default-scope-kullanmak-kotu-bir-fikir-mi/"/>
    <updated>2017-03-12T15:27:27+03:00</updated>
    <id>http://ecmelkytz.github.com/blog/2017/03/12/rails-default-scope-kullanmak-kotu-bir-fikir-mi</id>
    <content type="html"><![CDATA[<p><code>default_scope</code> belirli bir model üzerinde yapılacak tüm işlemler için varsayılan bir kapsam belirtmemizi sağlayan ActiveRecord metodudur.</p>

<p>Bu scope&#8217;u(kapsamı) modelimizde soft-deletion işlemi yapmak için kullanabiliriz. Soft-delete işlemi için <a href="https://github.com/rubysherpas/paranoia">paranioa</a> kullanmanızı ayrıca öneririm. <a href="http://ecmelkytz.net/blog/2016/04/09/rails-acts-as-paranoid-nedir/">Acts_as_paranoid ile veri silmekten korkmayın</a> başlıklı blog girdimde bundan bahsetmiştim.</p>

<p>Aşağıdaki gibi <code>deleted_on</code> kolonunu kullanarak default bir scope oluşturalım.</p>

<pre><code class="ruby">class Animal &lt; ActiveRecord::Base
  # Eğer bir veri silindiyse `deleted_on` alanı dolu olacak.
  default_scope where(deleted_on: nil)
end
</code></pre>

<p><strong>Animal</strong> modelinde tanımladığımız <code>default_scope</code> ile silinen kayıtları saklamış ve sadece silinmemiş olan kayıtlarla iş yapmamızı sağlamış olacağız.</p>

<pre><code class="ruby">&gt; Animal.limit(3)
=&gt; Animal Load (4.2ms)  SELECT `animals`.* FROM `animals` WHERE `animals`.`deleted_on` IS NULL LIMIT 3
</code></pre>

<!--more-->


<p>Bu scope tanımlaması bazı senaryolar için gerçekten kullanışlı bir durum olabilir ancak <code>default_scope</code> kullanımının tehlikeli bir yanı olduğunu da gözardı etmemek gerek. Çünkü bu scope modelimizin (initialization) başlatılmasını etkiler. Yani tüm (all) model kayıtlarımız üzerinde işlem yapmayı engellemiş oluruz.</p>

<p>Bir örnek görelim:</p>

<p><strong>Animal</strong> modelimizin polymorfic bir ilişkiye sahip olduğunu farzedelim ve <code>default_scope</code> ile  her zaman type&#8217;ı <strong>Cat</strong> olacak şekilde filtreleyelim.</p>

<pre><code class="ruby">class Animal ActiveRecord::Base
  belongs_to :genus, polymorphic: true
  default_scope where(genus_type: 'Cat')
end
</code></pre>

<p>Yeni bir <strong>Animal</strong> oluşturmaya çalıştığımız zaman <code>genus_type</code>&lsquo;ı varsayılan olarak <strong>Cat</strong> olacaktır.</p>

<pre><code class="ruby">&gt; Animal.new
=&gt; &lt;Animal id: nil, name: nil, genus_id: nil, genus_type: "Cat", created_at: nil, updated_at: nil&gt;
</code></pre>

<p>Bu tarz yan etkiler bilinmeden/farkına varılmadan kullanılırsa can sıkıcı problemlerin yaşanılması kaçınılmaz olacaktır.</p>

<p>Ayrıca <code>default_scope</code> kullandıktan sonra devam sorgularının yazılmasının da zor olduğunu belirtmek isterim.</p>

<p>Örneğin modelimizde type&#8217;ı <strong>Cat</strong> olmayanları şu şekilde bulmaya çalışalım:</p>

<pre><code class="ruby">$ Animal.where.not(genus_type: 'Cat')
</code></pre>

<p>Bu query ile istediğimiz sonucu elde edemeyeceğiz. Çünkü default olarak sadece type&#8217;ı <strong>Cat</strong> olanlar baz alınarak query başlatılacaktır. Önceden de bahsettiğim gibi burada initialization&#8217;ı etkilemiş oluyoruz. Peki diğer type&#8217;lara sahip kayıtlara hiç mi ulaşamayacağız? Elbette bunun da bir yolu var. Bunu sağlamak için ek olarak <code>unscope/unscoped</code> kullanmamız gerekecek.</p>

<h4>ActiveRecord kapsamlarını nasıl sileriz?</h4>

<p>Aşağıdaki kapsamlara sahip bir User modelimiz olsun.</p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
  scope :active, -&gt; { where(locked: false) }
  scope :admins, -&gt; { where(role: 'admin') }
  scope :ordered, -&gt; { order(:name) }
end
</code></pre>

<pre><code class="ruby"># Tüm kapsamları kullandık
$ users = User.active.admins.ordered
=&gt; SELECT "users".* FROM "users" WHERE "users"."locked" = 'f' AND "users"."role" = 'admin' ORDER BY "users"."name" ASC
</code></pre>

<p>Kapsamları kaldırmak için <code>unscope</code> ve <code>unscoped</code> metodlarını devreye sokalım:</p>

<pre><code class="ruby"># Tek bir kolon üzerindeki koşulları kaldırmak için
$ users.unscope(where: :role)
=&gt; SELECT "users".* FROM "users" WHERE "users"."locked" = 'f' ORDER BY "users"."name" ASC

# Bütün koşulları kaldırmak için
$ users.unscope(:where)
=&gt; SELECT "users".* FROM "users" ORDER BY "users"."name" ASC

# Order kaldırmak için
$ users.unscope(:order)
=&gt; SELECT "users".* FROM "users" WHERE "users"."locked" = 'f' AND "users"."role" = 'admin'

# Bütün kapsamları kaldırmak için
$ users.unscoped
=&gt; SELECT "users".* FROM "users"
</code></pre>

<p>Bir diğer dikkat etmemiz gereken husus <code>unscoped</code> kullanımı olacak. Çünkü bu query sadece default kapsamları değil tanımlı bütün kapsamları kaldıracaktır. <code>unscoped</code> Rails 3&#8217;den beri mevcut ancak <code>unscope</code> Rails 4 ile geldi.</p>

<p>Vel hasıl-ı kelam kullanacağımız <code>default_scope</code>&lsquo;un kapsamını, uzun vadedeki etkilerini biliyor isek kullanmamızda bir sakınca olmayacaktır. Ancak ekstra atraksiyonlara gerek kalmadan daha maintainable bir yapı için <code>default_scope</code> yerine normal kapsamların kullanılmasının daha doğru bir tercih olacağı kanaatindeyim.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: Tab menülerde paginate işlemi]]></title>
    <link href="http://ecmelkytz.github.com/blog/2016/09/24/rails-tab-menulerde-paginate-islemi/"/>
    <updated>2016-09-24T09:58:22+03:00</updated>
    <id>http://ecmelkytz.github.com/blog/2016/09/24/rails-tab-menulerde-paginate-islemi</id>
    <content type="html"><![CDATA[<p>Tab menülerde paginate işlemini yapılandırırken karşılaştığım sorunlar:</p>

<p>İlk önce tablar arasında geçişlerde bir sıkıntı yaşadım. Bunu <a href="https://github.com/mislav/will_paginate">will_paginate</a>&lsquo;in <code>param_name</code> parametresiyle şöyle hallettim.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@teachers</span> <span class="o">=</span> <span class="no">Teacher</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">page</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:teachers_page</span><span class="o">]</span><span class="p">,</span> <span class="ss">per_page</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="vi">@students</span> <span class="o">=</span> <span class="no">Student</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">page</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:students_page</span><span class="o">]</span><span class="p">,</span> <span class="ss">per_page</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;&amp;lt;%= will_paginate @teachers, param_name: &amp;ldquo;teachers_page&amp;rdquo; %&gt;</span>
</span><span class='line'><span class="sr">&amp;lt;%= will_paginate @students, param_name: &amp;ldquo;students_page&amp;rdquo; %&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Diğer bir sorun ise ilk tab dışındaki diğer tablarda paginate işlemiyle başka sayfalara geçiş yaptığım zaman (?pages=2) sistem sayfayı ilk tab&#8217;ın konumuna atıyordu.</p>

<p>Yani <code>yapmak istediğim ama aslında olan</code> tam da şu şekildeydi:</p>

<iframe src="//giphy.com/embed/GQTHzCNx0UgdW" width="480" height="270" frameBorder="0" class="giphy-embed" allowFullScreen style="display: block;margin: 0 auto;margin-bottom:20px"></iframe>


<p>Bu sorunu da HTML5&#8217;in localStorage&#8217;ını kullanarak şu şekilde hallettim:</p>

<!--more-->


<p><figure class='code'><figcaption><span>users_controller.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;GET /use</span><span class="n">rs</span><span class="o">/</span><span class="mi">1</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def show</span>
</span><span class='line'><span class="sr">  @user_activities_for_course_weeks = PublicActivity::Activity.includes(:trackable, :owner).where(owner_id: User.find(params[:id]), trackable_type: &amp;ldquo;CourseWeek&amp;rdquo;).paginate(page: params[:course_weeks], per_page: 10)</span>
</span><span class='line'><span class="sr">  @user_activities_for_teachers = PublicActivity::Activity.includes(:trackable, :owner).where(owner_id: User.find(params[:id]), trackable_type: &amp;ldquo;Teacher&amp;rdquo;).paginate(page: params[:teachers], per_page: 10)</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>show.html.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;activityTab&quot;</span> <span class="na">class=</span><span class="s">&quot;nav nav-tabs&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= link_to &quot;Course Weeks&quot;, &quot;#tab_week&quot;, id: &quot;profile-tab&quot;, role: &quot;tab&quot;, &quot;data-toggle&quot; =&gt; <span class="ni">&amp;#8220;</span>tab<span class="ni">&amp;#8221;</span> %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span><span class="err">&lt;</span>%= link_to &quot;Teachers&quot;, &quot;#tab_teacher&quot;, role: &quot;tab&quot;, id: &quot;profile-tab&quot;, &quot;data-toggle&quot; =&gt; <span class="ni">&amp;#8220;</span>tab<span class="ni">&amp;#8221;</span> %&gt;<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tab-content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= render &quot;week_activities&quot; %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= render &quot;teacher_activities&quot; %&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>_week_activities.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">role=</span><span class="s">&quot;tabpanel&quot;</span> <span class="na">class=</span><span class="s">&quot;tab-pane fade active in&quot;</span> <span class="na">id=</span><span class="s">&quot;tab_week&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;messages&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>% @user_activities_for_course_weeks.each do |activity| %&gt;
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="ni">&amp;#8230;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= will_paginate @user_activities_for_course_weeks, class: &quot;apple_pagination&quot;, param_name: &quot;course_weeks&quot; %&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>_teacher_activities.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">role=</span><span class="s">&quot;tabpanel&quot;</span> <span class="na">class=</span><span class="s">&quot;tab-pane fade&quot;</span> <span class="na">id=</span><span class="s">&quot;tab_teacher&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;messages&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>% @user_activities_for_teachers.each do |activity| %&gt;
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">style=</span><span class="s">&quot;list-style-type: none;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="ni">&amp;#8230;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= will_paginate @user_activities_for_teachers, class: &quot;apple_pagination&quot;, param_name: &quot;teachers&quot; %&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>user.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">a</span><span class="p">[</span><span class="nx">data</span><span class="o">-</span><span class="nx">toggle</span><span class="o">=&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">tab</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">on</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">show</span><span class="p">.</span><span class="nx">bs</span><span class="p">.</span><span class="nx">tab</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">activeTab</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">href</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;));</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">activeTab</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">activeTab</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">activeTab</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">activityTab</span> <span class="nx">a</span><span class="p">[</span><span class="nx">href</span><span class="o">=&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">activeTab</span> <span class="o">+</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">tab</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">show</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Farklı çözüm önerileriyle aydınlandığım vakit burayı güncelleyeceğim.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: Select ve Pluck metodları arasındaki fark nedir?]]></title>
    <link href="http://ecmelkytz.github.com/blog/2016/05/01/rails-select-ve-pluck-arasindaki-fark/"/>
    <updated>2016-05-01T15:53:59+03:00</updated>
    <id>http://ecmelkytz.github.com/blog/2016/05/01/rails-select-ve-pluck-arasindaki-fark</id>
    <content type="html"><![CDATA[<p>Bu yazımda select ve pluck metodlarının performans açısından farklarının neler olduğuna değineceğim.</p>

<p><strong>Select</strong></p>

<p>Select metodu User nesnelerini array olarak döndürecektir.</p>

<p><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">users</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;code&gt;id&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">users</span><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;=&gt;</span> <span class="o">[</span><span class="c1">#&lt;User id: 38&gt;, #&lt;User id: 50&gt;, #&lt;User id: 53&gt;, &amp;hellip;]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Ayrıca sadece id&#8217;leri elde etmek için aşağıdaki gibi ek kod yazmamız gerekecek.</p>

<p><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">users</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;code&gt;id&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">users</span><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;=&gt;</span> <span class="o">[</span><span class="mi">38</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<!--more-->


<p><strong>Pluck</strong></p>

<p>Pluck metodu herhangi bir ActiveRecord nesnesini oluşturmadan veritabanı sonucunu doğrudan bir array içinde döndürür. Sadece ilgili alanı sorgular.  Bu ise büyük bir sorgu yaptığımız zaman performans anlamında daha iyi bir sonuç elde edeceğimiz anlamına gelmektedir.</p>

<p><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">users</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;code&gt;id&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">users</span><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;=&gt;</span> <span class="o">[</span><span class="mi">38</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Terminal&#8217;deki geçen sürelere baktığımızda select sorgusunun 1.2ms, pluck sorgusunun 1.0ms sürdüğünü göreceğiz. Hatta bazen bu değerler aynı bile çıkabilir.  O zaman performans anlamında farktan nasıl bahsedeceğiz? <a href="http://ecmelkytz.github.io/blog/2016/04/05/rails-activerecord-ile-ilgili-ufak-bir-sir/">ActiveRecord ile ilgili ufak bir sır</a> başlıklı blog girdimde bu farkın nasıl oluşacağını bulabilirsiniz.</p>

<p>Benchmark kullanarak select ve pluck metodunun gerçek maliyetini bulalım.</p>

<p><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="no">Benchmark</span><span class="o">.</span><span class="n">measure</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">user</span>      <span class="nb">system</span>      <span class="n">total</span>      <span class="n">real</span>
</span><span class='line'><span class="mi">0</span><span class="o">.</span><span class="mi">110000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">110000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">111221</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="no">Benchmark</span><span class="o">.</span><span class="n">measure</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">user</span>      <span class="nb">system</span>      <span class="n">total</span>      <span class="n">real</span>
</span><span class='line'><span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mo">014544</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>13000 user kaydı arasında yapılan bu sorgulamalarda select&#8217;in pluck&#8217;a göre %90&#8217;dan fazla daha yavaş olduğu görülmektedir.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: acts_as_paranoid ile veri silmekten korkmayın]]></title>
    <link href="http://ecmelkytz.github.com/blog/2016/04/09/rails-acts-as-paranoid-nedir/"/>
    <updated>2016-04-09T13:58:21+03:00</updated>
    <id>http://ecmelkytz.github.com/blog/2016/04/09/rails-acts-as-paranoid-nedir</id>
    <content type="html"><![CDATA[<iframe src="//giphy.com/embed/bEVKYB487Lqxy" width="480" height="264" frameBorder="0" class="giphy-embed" allowFullScreen style="display: block;margin: 0 auto;margin-bottom:20px"></iframe>


<blockquote><p>“Bu veriyi silersem ileride lazım olur mu?”</p>

<p>“Eyvah! Yanlış veriyi sildim şimdi ne yapacağım? <img alt="scream" src="/images/emoji/unicode/1f631.png" class="emoji" />”</p></blockquote>

<p>tarzında çeşitlendirilebilen kaygılarınız var ise  ActiveRecord&#8217;un  acts_as_paranoid plugin&#8217;i imdadınıza yetişecektir.</p>

<h3>Peki nedir bu acts_as_paranoid ve nasıl kullanılır?</h3>

<p>Acts_as_paranoid silme işleminde <code>soft delete</code> yapmamıza olanak sağlar.  Yani veriyi sildiğimiz zaman aslında tam anlamıyla veritabanından o veriyi yok etmiş olmuyoruz.</p>

<p>Tabloya type&#8217;ı datetime olacak şekilde ekleyeceğimiz <code>deleted_at</code> alanı sayesinde silme işlemi yaptığımız zaman sadece bu kolonun değeri güncellenecek ve silinme zamanı burada tutulacak.</p>

<p>Bu plugin Active Record&#8217;un sadece destroy metodu üzerinde override yapmaz aynı zamanda find ve count metodları üzerinde de değişiklik yapar. Sql sorgularına deleted_at&#8217;i null olanların getirilmesiyle ilgili eklemeler getirecektir.</p>

<!--more-->


<p>Migration ile modelimize <code>deleted_at</code> alanını ekleyelim:</p>

<p><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">generate</span> <span class="n">migration</span> <span class="no">AddDeletedAtToUsers</span> <span class="ss">deleted_at</span><span class="p">:</span><span class="ss">datetime</span><span class="p">:</span><span class="n">index</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Migration dosya içeriğimiz:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddDeletedAtToUsers</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:deleted_at</span><span class="p">,</span> <span class="ss">:datetime</span>
</span><span class='line'>    <span class="n">add_index</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:deleted_at</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>models/user.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">acts_as_paranoid</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Şimdi bir user silelim:</p>

<p><figure class='code'><figcaption><span>models/user.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="no">User</span><span class="o">.</span><span class="n">count</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; 2&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="err">$</span> <span class="no">User</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">destroy</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;deleted_at güncellenecektir.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="err">$</span> <span class="no">User</span><span class="o">.</span><span class="n">count</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; 1&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Silinen</span> <span class="n">veriler</span> <span class="n">ile</span> <span class="n">birlikte</span> <span class="n">hepsini</span> <span class="n">bulmak</span> <span class="n">i</span><span class="err">ç</span><span class="k">in</span><span class="p">:</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;$ User.with_deleted&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Sadece</span> <span class="n">silinen</span> <span class="n">verileri</span> <span class="n">bulmak</span> <span class="n">i</span><span class="err">ç</span><span class="k">in</span><span class="p">:</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;$ User.only_deleted&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>User.count</code> kullandığımızda veya <code>find</code> ile o user&#8217;ı bulmaya çalıştığımızda user silinmiş gibi davranacaktır ancak veritabanında users tablosuna baktığımız zaman bu silinmiş sandığımız kaydın hala orada durduğunu ve <code>deleted_at</code> alanının verinin silindiği zamanı tuttuğunu göreceğiz.</p>

<p>Peki acts_as_paranoid ile hiçbir zaman veritabanından bir veriyi tam anlamıyla silemeyecek miyiz? Bunun da bir çözümü var. Herşeye rağmen kesinlikle silmek istediğimiz kayıtlar var ise:</p>

<p><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="err">$</span> <span class="no">User</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">really_destroy!</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Eğer veritabanında tutacağımız kolon adının <code>deleted_at</code> yerine <code>destroyed_at</code> (veya herhangi birşey) olmasını istiyorsak:</p>

<p><figure class='code'><figcaption><span>models/user.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">acts_as_paranoid</span> <span class="ss">column</span><span class="p">:</span> <span class="ss">:destroyed_at</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Callback&#8217;ler ile kullanımı ve  acts_as_paranoid hakkında daha fazla bilgi için <a href="https://github.com/rubysherpas/paranoia">bakınız</a>.</p>
]]></content>
  </entry>
  
</feed>
