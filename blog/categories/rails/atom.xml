<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Ecmel Kaytazoğlu]]></title>
  <link href="http://ecmelkytz.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ecmelkytz.github.com/"/>
  <updated>2016-03-15T16:34:19+02:00</updated>
  <id>http://ecmelkytz.github.com/</id>
  <author>
    <name><![CDATA[Ecmel Kaytazoğlu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails: ActiveRecord Enum Kullanımı]]></title>
    <link href="http://ecmelkytz.github.com/blog/2016/03/10/rails-activerecord-enum-kullanimi/"/>
    <updated>2016-03-10T14:00:01+02:00</updated>
    <id>http://ecmelkytz.github.com/blog/2016/03/10/rails-activerecord-enum-kullanimi</id>
    <content type="html"><![CDATA[<p>Rails 4.1 ile gelen enum özelliğini örnek senaryolar üzerinden açıklamaya çalışacağım.</p>

<p>Şimdi Car adında bir modelimiz olsun ve biz  aracın  kiralanmış (rented), kullanıma uygun (suitable_for_use) veya kullanım dışı (out_of_use) olması gibi bilgilerini tutmak isteyelim.</p>

<h5>Birden fazla kolon mu kullanalım? Neden?</h5>

<p>Aşağıdaki gibi tablomuza bu alanları eklediğimizi düşünelim.</p>

<pre><code class="Ruby">class AddStatusesToCars &lt; ActiveRecord::Migration
  def change
    add_column :cars, :suitable_for_use?, :boolean
    add_column :cars, :rented, :boolean
    add_column :cars, :out_of_use?, :boolean
  end
end
</code></pre>

<p>Bu senaryoya göre araç ya kiralanmıştır ya kullanılabilir durumdadır ya da kullanım dışıdır. Bunlardan herhangi birini true yaptığımızda diğer iki kolon kullanılmamış ve boş kalmış olacak.</p>

<p>Böyle durumlarda temsili ruh hali:</p>

<p><img class="center <a" src="href="http://rack.0.mshcdn.com/media/ZgkyMDEzLzA2LzEyL2Y4L0xpenp5TWNHdWlyLmMzYThhLmdpZgpwCXRodW1iCTEyMDB4OTYwMD4/312b02fe/7d8/Lizzy-McGuire.gif">http://rack.0.mshcdn.com/media/ZgkyMDEzLzA2LzEyL2Y4L0xpenp5TWNHdWlyLmMzYThhLmdpZgpwCXRodW1iCTEyMDB4OTYwMD4/312b02fe/7d8/Lizzy-McGuire.gif</a>&#8221;></p>

<p> O halde bu işlemi tek kolonda halletmenin bir yoluna bakalım:</p>

<pre><code class="Ruby">class AddStatusToCars &lt; ActiveRecord::Migration
  def change
    add_column :cars, :status, :integer, default: 0
  end
end
</code></pre>

<pre><code class="Ruby">class Car &lt; ActiveRecord::Base
  STATUSES = %w{suitable_for_use rented out_of_use}

    def status_to_s
      STATUSES[status]
    end

    def suitable_for_use?
      status_to_s == 'suitable_for_use'
    end

    def rented?
      status_to_s == 'rented'
    end

    def out_of_use?
      status_to_s == 'out_of_use'
    end
end
</code></pre>

<p>Kullanımına bakalım:</p>

<pre><code>&gt; Car.first.status_to_s
# =&gt; “suitable_for_use”

&gt; Car.first.suitable_for_use?
# =&gt; true

&gt; Car.first.rented?
# =&gt; false

&gt; Car.first.out_of_use?
# =&gt; false
</code></pre>

<p>Üç kolon oluşturmak yerine bu daha tercih edilebilir. Ancak ekstra fonksiyon oluşturma işleri nereye kadar?</p>

<p><img alt="sparkles" src="/images/emoji/unicode/2728.png" class="emoji" /> Enum&#8217;u devreye sokalım.</p>

<p>Car modelimize status alanını ekleyelim:</p>

<pre><code class="Ruby">class AddStatusToCars &lt; ActiveRecord::Migration
  def change
    add_column :cars, :status, :integer, default: 0
  end
end
</code></pre>

<p>Modelimize enum ile status&#8217;larımızı tanımlayalım.</p>

<pre><code class="Ruby">class Book &lt; ActiveRecord::Base
  enum status: [:suitable_for_use, :rented, :out_of_use]
end
</code></pre>

<p>Kullanımına bakalım:</p>

<pre><code class="Ruby">&gt; Car.first.status
# =&gt; “suitable_for_use”

&gt; Car.first.rented?
# =&gt; false

# Kitap durumunu kiralık olarak değiştirelim
book.status = :rented
book.rented! # güncellendi
book.rented?
# =&gt; true

# Bütün kiralık arabaları bulmak için (scope metodu)
 &gt; Car.rented
# =&gt; SELECT "cars".* FROM "cars" WHERE "cars"."status" = ?  [["status", 1]]
# [#&lt;Car:0x007f41d3eeeeee
# id: 1,
# status: 1,
# ]


# Bütün kullanım dışı arabaları bulmak için (scope metodu)
&gt; Car.out_of_use
# =&gt; SELECT "cars".* FROM "cars" WHERE "cars"."status" = ?  [["status", 2]]
# =&gt; []  (Kullanım dışı araç yok)
</code></pre>

<p>Özetlersek:</p>

<p>Status ile ilgili veriler tabloda tek bir kolonda tutularak enum ile tanımlanan attribute&#8217;lar ile veritabanındaki tamsayılar eşleştirilir.  ActiveRecord bu dizi indislerine karşılık gerçek sembolleri çeker ve onları döndürür. Enum aynı zamanda  suitable_for_use, rented, out_of_use scope&#8217;larını oluşturur.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails - Routes Don't Repeat Yourself (DRY)]]></title>
    <link href="http://ecmelkytz.github.com/blog/2016/01/27/rails-routes-dont-repeat-yourself-dry/"/>
    <updated>2016-01-27T10:37:13+02:00</updated>
    <id>http://ecmelkytz.github.com/blog/2016/01/27/rails-routes-dont-repeat-yourself-dry</id>
    <content type="html"><![CDATA[<p>Şöyle bir routes&#8217;a sahip olduğumuzu düşünelim:</p>

<p><figure class='code'><figcaption><span>routes.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:comments</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">member</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">post</span> <span class="ss">:like</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;resources :posts do</span>
</span><span class='line'><span class="sr">  member do</span>
</span><span class='line'><span class="sr">    post :like</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">collection</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">post</span> <span class="ss">:print</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Hem <code>:comments</code> hemde <code>:posts</code> resources yapıları aynı route&#8217;a sahip <code>post :like</code>.</p>

<p>Rails 4&#8217;te route yapısında <strong>concern</strong>  kullanarak DRY aykırı durumları idare edebiliriz.</p>

<p>Şöyle ki:</p>

<p><figure class='code'><figcaption><span>routes.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">concern</span> <span class="ss">:vote</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">member</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">post</span> <span class="ss">:like</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;resources :comments, concerns: :vote&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">resources</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">concerns</span><span class="p">:</span> <span class="ss">:vote</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">collection</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">post</span> <span class="ss">:print</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails-AngularJS (Unknown provider: tProvider) Hatası]]></title>
    <link href="http://ecmelkytz.github.com/blog/2015/09/12/rails-angularjs-unknown-provider-tprovider-hatasi/"/>
    <updated>2015-09-12T23:49:27+03:00</updated>
    <id>http://ecmelkytz.github.com/blog/2015/09/12/rails-angularjs-unknown-provider-tprovider-hatasi</id>
    <content type="html"><![CDATA[<p>Zamanında bu hata ile karşılaştığımda çözümü bulana kadar projede ilerlememi durdurduğu için kendi adıma buraya not etmekte fayda görüyorum.</p>

<p>Diyelimki Rails ile yazdığınız bir projede Angularjs kullandınız. Uygulamanız local&#8217;de sıkıntısız bir şekilde çalışıyor. Gelin görün ki production ortamında assets ile alakalı bir hata ile karşılaştınız.
Doğal olarak aşağıdaki kodu çalıştıracaksınız:</p>

<pre><code class="Ruby">RAILS_ENV=production rake assets:precompile
</code></pre>

<p>Ancak console&#8217;da aldığınız hata  <code>Error: Unknown provider: tProvider</code> ise precompile işlemi ile sorun çözülmeyecektir.</p>

<h4>Çözüm:</h4>

<p><code>/config/environments/production.rb</code>&lsquo;e aşağıdaki kodu eklemelisiniz.</p>

<pre><code class="ruby">config.assets.js_compressor = Uglifier.new(mangle: false)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails - Upcase, Downcase, Capitalize, Titleize Metodları (Non-Ascii)]]></title>
    <link href="http://ecmelkytz.github.com/blog/2014/11/17/rails-upcase/"/>
    <updated>2014-11-17T21:58:03+02:00</updated>
    <id>http://ecmelkytz.github.com/blog/2014/11/17/rails-upcase</id>
    <content type="html"><![CDATA[<p>Kelime, cümle vs. yazarken ingiliz alfabesi işinizi görüyorsa upcase, downcase, capitalize, titleize gibi metodlar istediğiniz gibi çalışacaktır. Ancak Türkçe, Rusça vs. karakterler işin içine girince bu metodlar tek başına istenilen sonucu vermemektedir. Bu tarz problemleri aşmak için <a href="https://github.com/lang/unicode_utils">UnicodeUtils</a> gemini kullanmakta fayda var.</p>

<h2>Upcase</h2>

<p>Bu method girilen kelimenin ya da cümlenin bütün harflerini büyük harfe çevirir.
&#8220;`Ruby</p>

<blockquote><p>&ldquo;ecmel&rdquo;.upcase
=> &ldquo;ECMEL&rdquo;
&ldquo;ücmöl&rdquo;.upcase
=> &ldquo;üCMöL&rdquo; #İstenilen bu değil</p></blockquote>

<h1>Diğer yol</h1>

<blockquote><p>UnicodeUtils.upcase(&ldquo;öcmül&rdquo;)
=> &ldquo;ÖCMÜL&rdquo;
UnicodeUtils.upcase(&ldquo;isim&rdquo;)
=> &ldquo;ISIM&rdquo;  #İstenilen bu değil</p></blockquote>

<h1>Diğer yol</h1>

<blockquote><p>&ldquo;öcü&rdquo;.mb_chars.upcase.to_s
=> &ldquo;ÖCÜ&rdquo;
&ldquo;isim&rdquo;.mb_chars.upcase.to_s
=> &ldquo;ISIM&rdquo; #İstenilen bu değil</p></blockquote>

<h1>Çözüm</h1>

<blockquote><p>UnicodeUtils.upcase(&ldquo;isim&rdquo;, :tr)
=> &ldquo;İSİM&rdquo;
&#8220;`</p></blockquote>

<h2>Downcase</h2>

<p>Bu method girilen kelimenin ya da cümlenin bütün harlerini küçük harfe çevirir.
&#8220;`Ruby</p>

<blockquote><p>UnicodeUtils.downcase(&ldquo;ECMEL&rdquo;)
=> &ldquo;ecmel&rdquo;
UnicodeUtils.downcase(&ldquo;ÖİLŞÜ&rdquo;)
=> &ldquo;öilşü&rdquo;</p></blockquote>

<h1>Diğer yol</h1>

<blockquote><p>&ldquo;ÖİÜŞĞ&rdquo;.mb_chars.downcase
=> &ldquo;öiüşğ&rdquo;
&#8220;`</p></blockquote>

<h2>Capitalize</h2>

<p>Bu method girilen kelimenin ya da cümlenin sadece ilk harfini büyük harfe çevirir.
&#8220;`Ruby</p>

<blockquote><p>&ldquo;ecmel&rdquo;.capitalize
=> &ldquo;Ecmel&rdquo;
&ldquo;öcü&rdquo;.capitalize
=> &ldquo;öcü&rdquo; #İstenilen bu değil</p></blockquote>

<h1>Diğer yol</h1>

<blockquote><p>&ldquo;öcü&rdquo;.mb_chars.capitalize
=> &ldquo;Öcü&rdquo;
&ldquo;izmir&rdquo;.mb_chars.capitalize #İstenilen bu değil
=> &ldquo;Izmir&rdquo;</p></blockquote>

<h1>Çözüm</h1>

<blockquote><p>UnicodeUtils.upcase(&ldquo;izmir&rdquo;, :tr).mb_chars.capitalize
=> &ldquo;İzmir&rdquo;
&#8220;`</p></blockquote>

<h2>Titleize</h2>

<p>Bu method girilen bir cümlenin her kelimesinin ilk harfini büyük harfe çevirir.</p>

<pre><code class="Ruby">&gt; "ecmel kytz".titleize 
=&gt; "Ecmel Kytz"
&gt; "önsöz iyi".titleize
=&gt; "önsöz Iyi" #İstenilen bu değil

#Diğer yol
&gt; "önsöz iyi".mb_chars.titleize.to_s
=&gt; "Önsöz Iyi" #İstenilen bu değil

#Diğer yol
&gt; UnicodeUtils.titlecase("önsöz iyi")
=&gt; "Önsöz Iyi" 

#Çözüm
&gt; UnicodeUtils.titlecase("önsöz iyi", :tr)
=&gt; "Önsöz İyi"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails - Devise(Could not found table) Hatası]]></title>
    <link href="http://ecmelkytz.github.com/blog/2014/09/09/rails-devise-could-not-found-table-hatasi/"/>
    <updated>2014-09-09T11:51:16+03:00</updated>
    <id>http://ecmelkytz.github.com/blog/2014/09/09/rails-devise-could-not-found-table-hatasi</id>
    <content type="html"><![CDATA[<p>Oluşturulan devise modelinin <strong>user</strong> olduğunu varsayarak okuyunuz.<br/>
Şimdi devise&#8217;ı Gemfile&#8217;a eklediniz, install ettiniz, viewleri oluşturdunuz, routes ayarladınız (bu konulara girmiyorum devise hakkında ayrıntılı bilgi için <a href="https://github.com/plataformatec/devise">bakınız</a> ) ve rake db:migrate kodunu çalıştırdığınız zaman herhangi bir geri dönüş almadınız.</p>

<p>Neyse birde serverda deneyelim bu işi dediniz. <code>http://localhost:3000/users/sign_in</code> adresine girmeye çalıştığınız zaman <strong>Could not find table &lsquo;users&rsquo;</strong> tarzında bir hata ile karşılaştınız. Yani users tablosu bulunamıyor .</p>

<p><img src="http://i.imgur.com/8Osy4h4.png" alt="Imgur" /></p>

<p>Zaten rake db:migrate kodunun çalışmamasından bir sorunla karşılaşmayı beklemek mantıklı olacaktır.</p>

<p><strong>Çözüm:</strong><br/>
Çok basit bir çözümü olmasıyla beraber gereksiz yere vaktimi çaldığı için buraya not düşmeye karar verdim.<br/>
<strong>db -> migrate</strong> altında <strong>devise_create_users</strong> dosyasının uzantısını <strong>.rb</strong> yapın sonrasında rake db:migrate çalıştırın tablolarınız sorunsuz bir şekilde oluşacaktır. <br/></p>
]]></content>
  </entry>
  
</feed>
